import { parseFlags } from '@stencil/core/cli';
import { loadConfig } from '@stencil/core/compiler';
import { BuildCtx, Config, OutputTargetCustom } from '@stencil/core/internal';
import { writeFileSync } from 'node:fs';
import { join } from 'node:path';
import { parseConfig } from './config-parser';
import { hasConfigProp, typeImportData } from './util';

interface ComponentConfigOptions {
  /**
   * If `false`, remove the prefix to the component tag.
   * @example 'pop-input' -> 'input'
   * @default true
   */
  prefix?: boolean;
}

export function componentConfigTarget(options?: ComponentConfigOptions): OutputTargetCustom {
  return {
    type: 'custom',
    name: 'component-option',
    async generator(config, _compilerCtx, buildCtx) {
      const parsedOptions = options || ({} as ComponentConfigOptions);
      const content = await generateDts(parsedOptions, config, buildCtx);

      writeFileSync(join(config.srcDir!, 'components-config.d.ts'), content);
    },
  };
}

async function generateDts(options: ComponentConfigOptions, config: Config, buildCtx: BuildCtx) {
  const styleConfig = await parseConfig();
  const QUOTE = styleConfig.isSingleQuote ? `'` : `"`;
  const quote = (text: string) => `${QUOTE}${text}${QUOTE}`;
  const semi = styleConfig.useSemi ? ';' : '';
  const indentStyle = styleConfig.tabIndent ? '\t' : Array(styleConfig.tabSize).fill(' ').join('');
  const indent = (size: number) => Array(size).fill(indentStyle).join('');

  const content: string[] = [
    '/* eslint-disable */',
    '/* tslint:disable */',
    '/**',
    ' * This is an autogenerated file created by the Cheese-grinder stencil Plugin.',
    ' * It contains typing information for all configurable components that exist in this project.',
    ' */',
  ];

  const validated = await loadConfig({
    config: {
      flags: parseFlags(process.argv),
    },
    configPath: config.configPath,
    logger: config.logger,
    sys: config.sys,
  });
  const types = typeImportData(validated.config, buildCtx);
  types.forEach(type => content.push(`import type ${type}`));
  content.push('');

  content.push('export namespace Configuration {');
  content.push(`${indent(1)}interface ComponentsConfig {`);
  buildCtx.components.forEach(component => {
    const props = component.properties.filter(hasConfigProp);
    if (props.length === 0) {
      return;
    }
    const tagName = options.prefix === false ? component.tagName.split('-').splice(1).join('-') : component.tagName;
    content.push(`${indent(2)}${quote(tagName)}?: {`);

    props.forEach(prop => {
      if (prop.docs.text) {
        content.push(`${indent(3)}/**`);
        prop.docs.text.split(/[\r\n]+/).forEach(line => content.push(`${indent(3)} * ${line}`));
        content.push(`${indent(3)} */`);
      }
      content.push(`${indent(3)}${prop.name}?: ${prop.complexType.original}${semi}`);
    });
    content.push(`${indent(2)}}${semi}`);
  });
  content.push(`${indent(1)}}`);
  content.push('}');

  return content.join('\n');
}
